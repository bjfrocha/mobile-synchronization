# Definition of properties is cascaded
# 
# Lowest level: definition in generator.properties
# Overridden by definition in your.gitignored.properties
# Overridden by applying for System.getProperty(...) (mvn or 'Run Definition, VM Arguments' with -Dkey=value)

# Special case for database connection properties
# The definition buildFor=web|local is required
buildFor=local

# If createSchema=true two connections must be configured, one for the servers and one for the generators connection 
# If configurations for local server and web hosted server are identical,
# the following set is sufficient (url as an example. Must fit your environment): 
url=jdbc:postgresql:postgres
user=
password=

# If definitions differ you define blocks for each scenario
webDatabaseUrl=jdbc:postgresql:postgres
webDatabaseUser=
webDatabasePassword=

localDatabaseUrl=jdbc:postgresql:postgres
localDatabaseUser=
localDatabasePassword=

# To generate the schema of the web hosted database from your workspace
# open a SSH tunnel with: ssh -L 3333:localhost:5432 root@<your server>
# and configure the url with  
webGeneratorDatabaseUrl=jdbc:postgresql://localhost:3333/postgres

# All property readings follow the cascading rule described above and
# 
# Lowest level url, user, password
# Overridden by localDatabaseUrl (webDatabaseUrl resp., depends on buildFor property), ...
# For generator overridden by localGeneratorDatabaseUrl (webGeneratorDatabaseUrl resp.), ...

# Two more properties are important
# webServer= tells the C# client where to find the server in the web (required if buildFor=web)
# localServer= is given by default as value of InetAddress.getLocalHost().getHostAddress()
# If the emulator for the mobile client cannot access this address you must provide the address with this property
# Both addresses can be found in C# project, Generated.MobileSynchronization.GeneratedConstants
# webServer=
# localServer=

# More useful properties:

# With property server.port you can define the port of the local server
# server.port=8081

# csharpModelRootPath and javaModelRootPath determine the root directory where to create POCO's and POJO's
# Pathes are absolute or relative to parent directory 
# default:
# csharpModelRootPath=Models/Models
# javaModelRootPath=mobile-synchronization-server/src/main/java

# With property serviceName you define the name of the war file, default: schema-version
# serviceName=your-recipe-server-1.0.0

# download.pageSize - default=1000, max=1000, depends on servers memory and max. record size
# upload.pageSize - default=1000, depends on servers memory and max. record size

# log.debug - default=false, displays some information in client and server
# log.json - default=false, displays Json content in client.

